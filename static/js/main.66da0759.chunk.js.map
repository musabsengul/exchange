{"version":3,"sources":["components/Exchange.js","App.js","serviceWorker.js","index.js"],"names":["Exchange","initial","value","label","useState","currencies","setCurrencies","amount","setAmount","to","setTo","from","setFrom","result","setResult","useEffect","fetch","then","response","json","data","parity","amount2","Number","catch","err","console","log","added","setAdded","className","id","type","placeholder","onChange","e","target","handleChangeAmount","options","isNaN","readOnly","onSubmit","event","preventDefault","initial2","concat","alertify","success","val","toUpperCase","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+RAyGeA,MArGf,WACE,IAAMC,EAAU,CACd,CAAEC,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,MAAOC,MAAO,QANP,EAQkBC,mBAASH,GAR3B,mBAQXI,EARW,KAQCC,EARD,OAUUF,mBAAS,GAVnB,mBAUXG,EAVW,KAUHC,EAVG,OAWEJ,mBAAS,OAXX,mBAWXK,EAXW,KAWPC,EAXO,OAYMN,mBAAS,OAZf,mBAYXO,EAZW,KAYLC,EAZK,OAaUR,mBAAS,GAbnB,mBAaXS,EAbW,KAaHC,EAbG,KAclBC,qBAAU,WACRC,MAAM,qDAAD,OACkDP,EADlD,kBAC8DE,IAEhEM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMC,EAASD,EAAKT,GACdW,EAAUC,OAAOhB,GAEvBO,EADYO,EAASC,MAGtBE,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,SAzBd,MA4BQrB,mBAAS,CAAC,CAAEF,MAAO,GAAIC,MAAO,MA5BtC,mBA4BXyB,EA5BW,KA4BJC,EA5BI,KA6ClB,OACE,yBAAKC,UAAU,WAAWC,GAAG,YAC3B,yCACA,2BACEC,KAAK,SACLF,UAAU,oBACVG,YAAa1B,EACb2B,SAAU,SAACC,GAAD,OAhBW,SAACA,GAC1B3B,EAAU2B,EAAEC,OAAOlC,OAeEmC,CAAmBF,MAEtC,qCACA,kBAAC,IAAD,CACEL,UAAU,cACVG,YAAaxB,EACb6B,QAASjC,EACT6B,SAAU,SAACC,GAAD,OAAOzB,EAAMyB,EAAEjC,UAE3B,uCACA,kBAAC,IAAD,CACE4B,UAAU,cACVG,YAAatB,EACb2B,QAASjC,EACT6B,SAAU,SAACC,GAAD,OAAOvB,EAAQuB,EAAEjC,UAE7B,yCACCqC,MAAM1B,GACL,2BACEiB,UAAU,oBACVE,KAAK,OACL9B,MAAM,mCACNsC,UAAQ,IAGV,2BACEV,UAAU,oBACVE,KAAK,OACL9B,MAAOW,EACPoB,YAAapB,EACb2B,UAAQ,IAGZ,yBAAKV,UAAU,QACb,0BAAMW,SAxDE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAW3C,EAAQ4C,OAAR,MAAA5C,EAAO,YAAW2B,IACnCtB,EAAcsC,GACdE,IAASC,QAAQ,SAAWnB,EAAM,GAAG1B,SAqD/B,oDACA,2BACE4B,UAAU,eACVE,KAAK,OACLE,SAnDW,SAACC,GACpB,IACMa,EADMb,EAAEC,OAAOlC,MACL+C,cAChBpB,EAAS,CAAC,CAAE3B,MAAO8C,EAAK7C,MAAO6C,MAiDvBf,YAAY,eACZiB,KAAK,QAEP,4BAAQpB,UAAU,sBAAlB,W,MClFKqB,MAdf,WAOE,OACE,yBAAKrB,UAAU,SACf,kBAAC,EAAD,Q,kBCAgBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdzC,OAAM,SAAA0C,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.66da0759.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport alertify from \"alertifyjs\";\r\nimport \"./exchange.css\";\r\nfunction Exchange() {\r\n  const initial = [\r\n    { value: \"TRY\", label: \"TRY\" },\r\n    { value: \"EUR\", label: \"EUR\" },\r\n    { value: \"USD\", label: \"USD\" },\r\n    { value: \"BTC\", label: \"BTC\" },\r\n    { value: \"ETH\", label: \"ETH\" },\r\n  ];\r\n  const [currencies, setCurrencies] = useState(initial);\r\n\r\n  const [amount, setAmount] = useState(1);\r\n  const [to, setTo] = useState(\"EUR\");\r\n  const [from, setFrom] = useState(\"TRY\");\r\n  const [result, setResult] = useState(0);\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://min-api.cryptocompare.com/data/price?fsym=${to}&tsyms=${from}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const parity = data[from];\r\n        const amount2 = Number(amount);\r\n        let total = parity * amount2;\r\n        setResult(total);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  });\r\n\r\n  const [added, setAdded] = useState([{ value: \"\", label: \"\" }]);\r\n\r\n  const addTo = (event) => {\r\n    event.preventDefault();\r\n    const initial2 = initial.concat(...added);\r\n    setCurrencies(initial2);\r\n    alertify.success(\"Added \" + added[0].value);\r\n  };\r\n  const handleChangeAmount = (e) => {\r\n    setAmount(e.target.value);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const res = e.target.value;\r\n    const val = res.toUpperCase();\r\n    setAdded([{ value: val, label: val }]);\r\n  };\r\n  return (\r\n    <div className=\"m-2 pt-3\" id=\"exchange\">\r\n      <label>Amount</label>\r\n      <input\r\n        type=\"number\"\r\n        className=\"form-control mb-2\"\r\n        placeholder={amount}\r\n        onChange={(e) => handleChangeAmount(e)}\r\n      />\r\n      <label>To</label>\r\n      <Select\r\n        className=\"select mt-2\"\r\n        placeholder={to}\r\n        options={currencies}\r\n        onChange={(e) => setTo(e.value)}\r\n      />\r\n      <label>From</label>\r\n      <Select\r\n        className=\"select mt-2\"\r\n        placeholder={from}\r\n        options={currencies}\r\n        onChange={(e) => setFrom(e.value)}\r\n      />\r\n      <label>Result</label>\r\n      {isNaN(result) ? (\r\n        <input\r\n          className=\"form-control mt-2\"\r\n          type=\"text\"\r\n          value=\"Please check your added currency\"\r\n          readOnly\r\n        />\r\n      ) : (\r\n        <input\r\n          className=\"form-control mt-2\"\r\n          type=\"text\"\r\n          value={result}\r\n          placeholder={result}\r\n          readOnly\r\n        />\r\n      )}\r\n      <div className=\"mt-5\">\r\n        <form onSubmit={addTo}>\r\n          <label>ADD YOUR CURRENCY</label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            onChange={handleChange}\r\n            placeholder=\"Example: BTC\"\r\n            name=\"add\"\r\n          />\r\n          <button className=\"btn btn-light mt-2\">Add</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Exchange;\r\n","import React  from \"react\";\r\nimport Exchange from './components/Exchange';\r\nimport \"./app.css\";\r\nfunction App() {\r\n  \r\n  // const addToCurrency = (event)=> {\r\n  //   event.preventDefault()\r\n  //   let adam = event.target.value\r\n  //   console.log(typeof(adam))\r\n  // }\r\n  return (\r\n    <div className=\"selam\">\r\n    <Exchange />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport \"alertifyjs/build/css/alertify.min.css\"\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}